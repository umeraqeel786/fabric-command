Error: listen EADDRINUSE :::3001       |   ==========================
                                       |   No container cli found:
killall -9 node                        |   upgarde docker-compose
				       |   
 				       |
ps ax

====================






====================

FAILED TO EXECUTE END 2 END SCENARIO


$./byfn.sh down
$sudo systemctl daemon-reload
$sudo systemctl restart docker
$./byfn.sh –m up

===========================

Channel access denied 

First delete the folder wallet.
In fabcar directory run : ./startFabric.sh javascript
Repeat the register and enroll step: node enrollAdmin.js && node registerUser.js && node query.js
===========================
continer name is already use rename it


docker rm -f $(docker ps -aq) && docker rmi -f $(docker images | grep dev | awk '{print $3}') && docker volume prune

OR

To clear containers:

    docker rm -f $(docker ps -a -q)

To clear images:

    docker rmi -f $(docker images -a -q)

To clear volumes:

    docker volume rm $(docker volume ls -q)

To clear networks:

    docker network rm $(docker network ls | tail -n+2 | awk '{if($2 !~ /bridge|none|host/){ print $1 }}')




==========DOCKER KILLER==========================
docker kill $(docker ps -q)
docker rm $(docker ps -qa)
docker system prune -a 
docker volumes prune -a


================================

 START DOCKER:

$ docker start $(docker ps -aq)

=============================
Cannot compile chaincode, cannot find package error

$ cd $GOPATH/src/github.com
$ mkdir hyperledger
$ cd hyperledger
$ git clone http://gerrit.hyperledger.org/r/fabric.git


========================================

docker pull couchdb:2.3

==================================

docker-compose have servvices to start network


===crypto-config.yml===========

for creating a network bootstrap the network require identity
 
1 using ca
2 cryptogen tool
for creating identity


=========================================
Step 1: Query all car records

$ docker exec cli peer chaincode invoke -C mychannel -n fabcar -c '{"Args":["queryAllCars"]}'

Step 2: Query a specific car by CarID

$ docker exec cli peer chaincode invoke -C mychannel -n fabcar -c '{"Args":["queryCar","CAR4"]}'

Step 3: Add a new car

$ docker exec cli peer chaincode invoke -C mychannel -n fabcar -c '{"Args":["createCar", "CAR12", "Honda", "Accord", "black", "Tom"]}'

Step 5: Change owner of CAR4

$ docker exec cli peer chaincode invoke -C mychannel -n fabcar -c ‘{“Args”:[“changeCarOwner”, “CAR4”, “KC”]}’

Step 6: Query CAR4 again

$ docker exec cli peer chaincode invoke -C mychannel -n fabcar -c ‘{“Args”:[“queryCar”,”CAR4"]}’
